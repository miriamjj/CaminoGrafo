package pr2;

import java.util.*;

public class Graph<V> {
    //Lista de adyacencia.
    private Map<V, Set<V>> adjacencyList = new HashMap<>();

    /******************************************************************
     * Añade el vértice ‘v‘ al grafo.
     *
     * @param v vértice a añadir.
     * @return ‘true‘ si no estaba anteriormente y ‘false‘ en caso contrario.
     ******************************************************************/
    public boolean addVertex(V v) {
        if(adjacencyList.containsKey(v)){
            return false;
        }
        adjacencyList.put(v, new HashSet<V>()); //Añadimos el vértice y un conjunto de vecinos vacío
        return true;
    }

    /******************************************************************
     * Añade un arco entre los vértices ‘v1‘ y ‘v2‘ al grafo. En caso de que no exista alguno de los vértices, lo añade
     * también.
     *
     * @param v1 el origen del arco.
     * @param v2 el destino del arco.
     * @return ‘true‘ si no existía el arco y ‘false‘ en caso contrario.
     ******************************************************************/
    public boolean addEdge(V v1, V v2) {
        if(!adjacencyList.containsKey(v1)){
            adjacencyList.put(v1, new HashSet<V>()); //Añadimos el vértice y un conjunto de vecinos vacío
        }
        if(!adjacencyList.containsKey(v2)){
            adjacencyList.put(v2, new HashSet<V>()); //Añadimos el vértice y un conjunto de vecinos vacío
        }
        Set<V> vecinosV1 = adjacencyList.get(v1); // Devuelve el conjunto de vértices vecinos a v1
                                                  //vecinosV1 es de tipo Set<V>
        Set<V> vecinosV2 = adjacencyList.get(v2); // Devuelve el conjunto de vértices vecinos a v2

        if(vecinosV1.contains(v2)){ //Comprobar si existe arco entre v1 y v2
            return false;
        }
        vecinosV1.add(v2); //Añadimos v2 al conjunto de vecinos de v1
        vecinosV2.add(v1); //Añadimos v1 al conjunto de vecinos de v2
        return true;
    }

    /******************************************************************
     * Obtiene el conjunto de vértices adyacentes a ‘v‘.
     *
     * @param v vértice del que se obtienen los adyacentes.
     * @return conjunto de vértices adyacentes.
     ******************************************************************/
    public Set<V> obtainAdjacents(V v) throws Exception{
        return adjacencyList.get(v); //Devuelve el conjunto de vecinos de v
    }

    /******************************************************************
     * Comprueba si el grafo contiene el vértice dado.
     *
     * @param v vértice para el que se realiza la comprobación.
     * @return ‘true‘ si ‘v‘ es un vértice del grafo.
     ******************************************************************/
    public boolean containsVertex(V v) {
        return adjacencyList.containsKey(v); // Comprueba si la lista de adjacencias contiene v
    }

    /******************************************************************
     * Método ‘toString()‘ reescrito para la clase ‘Grafo.java‘.
     *
     * @return una cadena de caracteres con la lista de adyacencia.
     ******************************************************************/
    @Override
    public String toString() {
        StringBuilder cadena = new StringBuilder();
        for(V v : adjacencyList.keySet()){
            cadena.append(v.toString());
            cadena.append(": ");
            cadena.append(adjacencyList.get(v).toString());
            cadena.append("\n");
        }
        return cadena.toString();
    }

    /******************************************************************
     * Obtiene, en caso de que exista, un camino entre ‘v1‘ y ‘v‘. En caso contrario, devuelve ‘null‘.
     *
     * @param v1 el vértice origen.
     * @param v2 el vértice destino.
     * @return lista con la secuencia de vértices desde ‘v1‘ hasta ‘v2‘ pasando por arcos del grafo.
     ******************************************************************/
    public List<V> onePath(V v1, V v2) {
        return null;
    }
}
